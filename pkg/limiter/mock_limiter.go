// Code generated by MockGen. DO NOT EDIT.
// Source: limiter.go

// Package limiter is a generated GoMock package.
package limiter

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLimiter is a mock of Limiter interface
type MockLimiter struct {
	ctrl     *gomock.Controller
	recorder *MockLimiterMockRecorder
}

// MockLimiterMockRecorder is the mock recorder for MockLimiter
type MockLimiterMockRecorder struct {
	mock *MockLimiter
}

// NewMockLimiter creates a new mock instance
func NewMockLimiter(ctrl *gomock.Controller) *MockLimiter {
	mock := &MockLimiter{ctrl: ctrl}
	mock.recorder = &MockLimiterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLimiter) EXPECT() *MockLimiterMockRecorder {
	return m.recorder
}

// Visit mocks base method
func (m *MockLimiter) Visit(key string) (Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Visit", key)
	ret0, _ := ret[0].(Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Visit indicates an expected call of Visit
func (mr *MockLimiterMockRecorder) Visit(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Visit", reflect.TypeOf((*MockLimiter)(nil).Visit), key)
}
